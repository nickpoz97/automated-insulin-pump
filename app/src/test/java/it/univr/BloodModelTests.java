/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package it.univr;

import it.univr.bloodModels.BloodModel;
import it.univr.bloodModels.InteractiveBloodModel;
import it.univr.exceptions.LethalSugarValuesException;
import org.junit.Test;
import static org.junit.Assert.*;

public class BloodModelTests {
    @Test
    public void testInvalidBloodDataInstance(){
        try {
            BloodModel bloodModel = new InteractiveBloodModel(BloodModel.getMaxSugar()+1, 0, 0);
            fail();
        }
        catch (LethalSugarValuesException e){
            assertTrue(true);
        }
        try{
            BloodModel bloodModel = new InteractiveBloodModel(BloodModel.getMinSugar()-1, 0, 0);
            fail();
        }
        catch (LethalSugarValuesException e){
            assertTrue(true);
        }
    }

    @Test
    public void testRaisingSugar(){
        int incrementValue = 4;
        int incrementRate = 2;
        int startingSugarLevel = (BloodModel.getMinSugar()+ BloodModel.getMaxSugar())/2;
        BloodModel bloodModel = new InteractiveBloodModel(startingSugarLevel, incrementValue, incrementRate);
        assertEquals(bloodModel.getIncrementRate(), incrementRate);

        assertEquals(bloodModel.getIncrementValue(), incrementValue);
        assertEquals(bloodModel.actualSugarLevel(), startingSugarLevel);

        assertEquals(bloodModel.getIncrementValue(), incrementValue + incrementRate);
        assertEquals(bloodModel.actualSugarLevel(), startingSugarLevel + incrementValue);
    }

    @Test
    public void testLoweringSugar(){
        int startingIncrementValue = -4;
        int startingIncrementRate = -2;
        int startingSugarLevel = (BloodModel.getMinSugar()+ BloodModel.getMaxSugar())/2;
        BloodModel bloodModel = new InteractiveBloodModel(startingSugarLevel, startingIncrementValue, startingIncrementRate);

        assertEquals(bloodModel.getIncrementRate(), startingIncrementRate);
        assertEquals(bloodModel.getIncrementValue(), startingIncrementValue);
        assertEquals(bloodModel.actualSugarLevel(), startingSugarLevel);

        assertEquals(bloodModel.getIncrementValue(), startingIncrementValue + startingIncrementRate);
        assertEquals(bloodModel.actualSugarLevel(), startingSugarLevel + startingIncrementValue);
    }

    @Test(expected = LethalSugarValuesException.class)
    public void testExceedingSugarValue(){
        int incrementValue = 4;
        int incrementRate = 2;
        int startingSugarLevel = (BloodModel.getMinSugar()+ BloodModel.getMaxSugar())/2;
        BloodModel bloodModel = new InteractiveBloodModel(startingSugarLevel, incrementValue, incrementRate);
        for(int i = 0 ; i < 1000 ; i++){
            // it also updates sugar level in interactiveBloodData
            bloodModel.actualSugarLevel();
        }
        fail();
    }

    @Test(expected = LethalSugarValuesException.class)
    public void testLowSugarValue(){
        int incrementValue = -4;
        int incrementRate = -2;
        int startingSugarLevel = (BloodModel.getMinSugar()+ BloodModel.getMaxSugar())/2;
        BloodModel bloodModel = new InteractiveBloodModel(startingSugarLevel, incrementValue, incrementRate);
        for(int i = 0 ; i < 1000 ; i++){
            // it also updates sugar level in interactiveBloodData
            bloodModel.actualSugarLevel();
        }
        fail();
    }

    @Test
    public void insulinInjectionTest(){
        int incrementValue = 4;
        int incrementRate = 2;
        int startingSugarLevel = (BloodModel.getMinSugar()+ BloodModel.getMaxSugar())/2;
        BloodModel bloodModel = new InteractiveBloodModel(startingSugarLevel, incrementValue, incrementRate);
        bloodModel.injectInsulin(2);
        assertEquals(bloodModel.getIncrementRate(), 0);
        bloodModel.injectInsulin(10);
        assertEquals(bloodModel.getIncrementRate(), -10);
    }
}
